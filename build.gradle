plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.10.0'
}

group 'run.runc'
version '1.0'

repositories {
    mavenCentral()
}

compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}


def allureVersion = "2.20.0",
    assertJVersion = "3.23.1",
    slf4jVersion = "2.0.6"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    implementation(
            "org.assertj:assertj-core:$assertJVersion",
            "org.junit.jupiter:junit-jupiter:5.9.0",
            "io.rest-assured:rest-assured:5.3.0",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "com.codeborne:selenide:6.11.0",
            "org.aeonbits.owner:owner:1.0.12",
            "io.qameta.allure:allure-selenide:2.20.0",
            "com.github.javafaker:javafaker:1.0.2",
            "io.qameta.allure:allure-rest-assured:$allureVersion"
    )
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task specialForm(type: Test) {
    useJUnitPlatform {
        includeTags("specialForm")
    }
}
